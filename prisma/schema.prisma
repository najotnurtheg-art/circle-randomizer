// prisma/schema.prisma

// ---------- Generator ----------
generator client {
  provider        = "prisma-client-js"
  // By default Prisma uses the Node-API engine which is fine on Vercel
  // If you have custom requirements you can add: engineType = "binary"
}

// ---------- Datasource ----------
// If you're NOT on PostgreSQL, change provider to "mysql" or "sqlite"
// and adjust DATABASE_URL accordingly in Vercel.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum Role {
  USER
  ADMIN
}

// ---------- Models ----------
model User {
  id          String   @id @default(cuid())
  tgId        String?  @unique
  username    String?
  displayName String?
  role        Role     @default(USER)
  createdAt   DateTime @default(now())

  wallet      Wallet?
  // If you later add relation from SpinLog -> User, you can uncomment:
  // spins     SpinLog[]
}

model Wallet {
  userId  String  @id
  balance Int     @default(0)

  user    User    @relation(fields: [userId], references: [id])
}

model Item {
  id        String   @id @default(cuid())
  name      String
  tier      String   // 'T50' | 'T100' | 'T200' | 'T500'
  isActive  Boolean  @default(true)
  purchasable Boolean @default(false)
  imageUrl  String?
  createdAt DateTime @default(now())
}

model SpinState {
  id          String   @id        // 'global'
  status      String              // 'IDLE' | 'SPINNING'
  userId      String?
  username    String?
  wager       Int?
  segments    Json?
  resultIndex Int?
  spinStartAt DateTime?
  durationMs  Int?
  popup       Json?
  updatedAt   DateTime @updatedAt
}

model SpinLog {
  id        String   @id @default(cuid())
  userId    String
  username  String
  wager     Int
  prize     String
  createdAt DateTime @default(now())

  // Optional relation (only if you want it)
  // user     User     @relation(fields: [userId], references: [id])
}
